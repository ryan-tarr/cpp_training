// Goal: Perform one iteration of critical sequence:
//  1. Detect any number of obstacles of type car, pedestrian, and bus.
//  2. For pedestrian obstacles, generate a trajectory that will cause the vehicle to stop.
//  3. For other obstacles, generate a trajectory that will follow the road.
//  4. Exit the program after receiving a stop trajectory.
//
// Purpose:
//  1. Demonstrate knowledge of C++
//  2. Demonstrate program design ability with C++
//
// Requirements:
//  1. Messages between Components are Type Safe in C++
//  2. Components are Decoupled
//  -- ie. components only understand message types, and make
//     no assumptions about other component types.
//
// Simplifying Assumptions:
//  - Fidelity to reality is helpful but not required.
//  - Not multi-threaded or multi-process.
//
// Example code is a trivial simulation of real autonomy system, may be modified in any way that
// meets the goal, purpose, or requirements. No actual perception, planning, or control is
// necessary.

#include <iostream>
using namespace std;

bool exit = false;

struct Obstacle {
    std::string type;
};

struct Trajectory {
    std::string action;
};

// ...

struct Perception {
    void tick() {
        Obstacle obstacle;  // Output.
        obstacle.type = "Pedestrian";

        // ??
    }
};

struct Planning {
    void tick() {
        Obstacle obstacle;      // Input.
        Trajectory trajectory;  // Output.
        trajectory.action = "Road";

        // ??

        if (obstacle.type == "Pedestrian") {
            trajectory.action = "Stop";
        }

        // ??
    }
};

struct Control {
    void tick() {
        Trajectory trajectory;  // Input.

        // ??

        if (trajectory.action == "Stop") {
            exit = true;
        }
    }
};

template <typename Components>
void run(Components&& components) {
    for (auto&& component : components) {
        component->tick();
    }
}

// ...

int main(int argc, char** argv) {
    Perception perception;
    Planning planning;
    Control control;

    // ??

    while (!exit) {
        // ??
    }

    return 0;
}
