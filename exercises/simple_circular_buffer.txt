#include <iostream>
#include <utility>
#include <array>
#include <cassert>

template <typename T, size_t N>
struct CircularBuffer {
  void push(T value) {
    buf[next] = std::move(value);
    next = (next + 1) % N;
    size = std::min(size + 1, N);
  }

  T pop() {
    assert(size);
    auto start = next - size + N;
    size -= 1;
    return buf[start % N];
  }

  void print() const {
    auto start = next - size + N;
    for (size_t i = 0; i < size; ++i) {
      std::cout << buf[(start + i) % N] << ", ";
    }
    std::cout << "\n";
  }
  size_t next = 0;
  size_t size = 0;
  std::array<T, N> buf;
};

int main() {
  CircularBuffer<int, 3> b;
  b.push(1);
  b.push(2);
  b.push(3);
  b.print();
  b.push(4);
  b.print();
  std::cout << b.pop() << "\n";
  b.print();
  std::cout << b.pop() << "\n";
  b.print();
  b.push(5);
  b.print();
}
