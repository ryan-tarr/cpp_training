* Reactive Data-flow Oriented Processing
- "game map-reduce event processing"
= input events are transient and held in stream buffer
= game entities are scene persistent and composed of component arrays
= entity controllers are continuous modifiers of component or controller state over time
= computation is directed graph of tasks, which are operations over streams
-- event map: incoming events from an input queue into a descending series of ever more specialized consumption queues
--- filter, transform (flyweight/proxy/handle, copy, move, construct, destroy, etc.)
--- can be done in parallel
--- presumed that sum of sizes of each subqueue O(n)
-- event reduce: the contents of each remaining queue are consumed entirely by a terminal process
- end result of input stream processing is often a change of state of entity-components
- dirty state is recorded in each entity or component (use STM/RCU algorithm for threaded reads/updates)
-- component processing of entities proceeds similarly
--- component map: for each processing routine, build a map of dirty or otherwise interesting components
--- component reduce: for each interest map, queue and process components
- each map/reduce step is scheduled in a central task-stealing concurrent framework
-- no intra-element dependencies in mappings, but implicit dependencies may exist in reductions
-- each task lists result-stream dependant tasks as children
-- task is bound to input-stream, result-stream, map operator and reduce operator
-- controller: ? (AI, animation, physics -- versus observer?)
-- file streaming: SAX-like back end generates new objects for each hierarchical section in the file as it's read
--- hierarchical sub-streams access each granularity of sub-section
-- network streaming: see Structured Streams Transport
-- task streaming: stream by priority, which thread to run on, etc (these are properties of the stream not the task)
--- linked list joins parent to dependency tasks
--- dependency tasks read the return value and decide whether to run
--- tasks can choose to enqueue more tasks, or dequeue their children (as an optimization instead of propagating a failure code)
--- real-time tasks have a time-out value and expiry handler
