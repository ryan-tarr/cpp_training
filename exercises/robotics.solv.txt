// Goal: Perform one iteration of critial sequence:
//  1. Detect an obstacle.
//  2. Generate a nogo trajectory.
//
// Purpose:
//  1. Demonstrate knowledge of C++
//  2. Demonstrate program design ability in C++
//
// Requirements:
//  1. Messages are Type Safe
//  2. Components are Decoupled
//  -- ie. components only understand message types, not component types.
//
// Simplifying Assumptions:
//  - Single threaded.
//  - All types are known ahead of time.
//
// Example code may be modified in any way that meets the goal, purpose, or requirements.

#include <functional>
#include <iostream>
#include <vector>
using namespace std;

bool nogo = false;

struct Obstacle {
  std::string type;
};

struct Trajectory {
  std::string action;
};

struct Perception {
  void tick() {
    Obstacle obstacle;  // Output.
    obstacle.type = "Pedestrian";

    out(std::move(obstacle));
  }

  std::function<void(Obstacle)> out;
};

struct Planning {
  void tick() {
    Obstacle obstacle;      // Input.
    Trajectory trajectory;  // Output.

    if (in.empty()) {
      return;
    }

    obstacle = std::move(in.back());
    in.pop_back();

    if (obstacle.type == "Pedestrian") {
      trajectory.action = "Stop";
    }

    out(std::move(trajectory));
  }

  std::vector<Obstacle> in;
  std::function<void(Trajectory)> out;
};

struct Control {
  void tick() {
    Trajectory trajectory;  // Input.

    if (in.empty()) {
      return;
    }

    trajectory = std::move(in.back());
    in.pop_back();

    if (trajectory.action == "Stop") {
      nogo = true;
    }
  }

  std::vector<Trajectory> in;
};

int main(int argc, char** argv) {
  Perception perception;
  Planning planning;
  Control control;

  perception.out = [&planning](auto obstacle) {
    std::cout << "Sending obstacle\n";
    planning.in.push_back(std::move(obstacle));
  };

  planning.out = [&control](auto trajectory) {
    std::cout << "Sending trajectory\n";
    control.in.push_back(std::move(trajectory));
  };

  while (!nogo) {
    perception.tick();
    planning.tick();
    control.tick();
  }

  return 0;
}
