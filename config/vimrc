" Base .vimrc -- Ryan McDougall

colorscheme slate

" Set up vundle
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'a.vim'
Plugin 'gtags.vim'
Plugin 'fugitive.vim'
Plugin 'matchit.zip'
Plugin 'OmniCppComplete'
Plugin 'rhysd/vim-clang-format'
Plugin 'mileszs/ack.vim'
call vundle#end()
" :PluginList           - list configured plugins
" :PluginInstall(!)     - install (update) plugins
" :PluginSearch(!) foo  - search (or refresh cache first) for foo
" :PluginClean(!)       - confirm (or auto-approve) removal of unused plugins

filetype plugin indent on   " autoguess by file extension
set nocompatible            " use VIM settings
set autowriteall            " write buffer to file when switching
set undofile                " persistent undo
set tabstop=4               " number of spaces in a tab
set softtabstop=4           " number of spaces in a soft tab
set shiftwidth=4            " used in shifting or C indenting
set expandtab               " insert spaces for tabs
set smarttab                " prefer shiftwidth
set cindent                 " C indenting
set cinoptions=:0,g0,N-s    " minimize switch, class, ns, indenting
set ruler                   " show the cursor
set number                  " print line numbers
set incsearch               " incremental search
set hlsearch                " highlight search matches
set wildmenu                " print menu completions
set scrolloff=5             " keep lines of context when scrolling
set matchpairs+=<:>         " match angle brackets
set splitright              " split in empty space to the right
set guioptions-=tT          " turn off annoying toolbars
set noerrorbells            " turn off annoying bells
set vb t_vb=                " turn off annoying blinking
let mapleader=","           " comma is more convenient

" Auto Clang Format
autocmd FileType * :ClangFormatAutoDisable
autocmd FileType C,CPP :ClangFormatAutoEnable

" Google Style
" autocmd FileType CPP set tabstop=2 shiftwidth=2 softtabstop=2
" set cinoptions=g1,h1,N-s

" Eclipse Style
autocmd! FileType Java set tabstop=4 shiftwidth=4 softtabstop=4

" PEP 8 Style
autocmd! FileType Python set tabstop=8 shiftwidth=4 softtabstop=4

" JavaScript
autocmd! FileType JavaScript set tabstop=2 shiftwidth=2 softtabstop=2

" Try not to clutter source directories
if isdirectory($HOME.'/.vim/swap') == 0
  :silent !mkdir -p ~/.vim/swap >/dev/null 2>&1
endif
if isdirectory($HOME.'/.vim/undo') == 0
  :silent !mkdir -p ~/.vim/undo > /dev/null 2>&1
endif
set directory=~/.vim/swap//,.,~/tmp//,/var/tmp//
set undodir=~/.vim/undo//,.,~/tmp//,/var/tmp//

" Windows GUI tweaks
if has("gui_win32")
    set guifont=DejaVu_Sans_Mono:h9:cANSI
    set shellslash          "unify shell path seperator handling (eg. Cygwin)
endif

" Fix redraw issues on MacOSX
autocmd FocusGained * :redraw!

"multi-platform support
if has("unix")
    let find="find . -name "
else
    let find="dir /b /s "
endif

"syntax highlighting always on
if !exists ("syntax_on")
    syntax on
endif

"quit without saving
"noremap <silent> <C-Q><C-Q> <Esc>:qa!<CR>
"noremap! <silent> <C-Q><C-Q> <Esc>:qa!<CR>

"save buffer
noremap <silent> <Leader>w <Esc><C-C>:w<CR>
noremap <silent> <F1> <Esc><C-C>:w!<CR>
noremap! <silent> <F1> <Esc><C-C>:w!<CR>

"cancel highlighting
nnoremap <silent> <C-C> <C-C>:nohl<CR>

"next/prev/delete buffer
nnoremap <silent> <C-N> :bnext<CR>
nnoremap <silent> <C-P> :bprevious<CR>
nnoremap <silent> <C-X> :bdelete!<CR>

"additional scrolling 
nnoremap <silent> <Backspace> <PageUp>
nnoremap <silent> <Space> <PageDown> 

"window resizing
"nnoremap <C-u> :resize +10<CR>
"nnoremap <C-d> :resize -10<CR>

"toggle .{c|cpp}/.{h|hpp}
nnoremap <silent> <C-A> :A<CR>

"insert newline
nnoremap <C-J> O<Esc>j

"ctag searching
nnoremap <Leader>t :tjump<Space>

"gtag searching
nnoremap <Leader>r :Gtags -r <C-R><C-W><CR>
nnoremap <Leader>R :Gtags -s <C-R><C-W><CR>
nnoremap <Leader>f :Gtags -f %<CR>
nnoremap <Leader>p :Gtags -P 
nnoremap <Leader>g :Gtags -g 

"quickfix window
nnoremap <Leader>q :copen<CR>
nnoremap <Leader>Q :cclose<CR>
nnoremap ]q :cnext<CR>
nnoremap [q :cprevious<CR>

"search+replace word under cursor
nnoremap <Leader>s :,$s/\<<C-R><C-W>\>/

"grep word under cursor
nnoremap <C-g> :Ack <C-R><C-W> %:h

"find file with quickfix integration
nnoremap <C-f> :cgetexpr system(find."")

"make local file with quickfix integration
" may require modeline set CXXFLAGS='...'
nnoremap <Leader>m :make %< \|cwindow<CR>

"generate local C++ tags file
nnoremap <silent> <Leader>+ :!ctags -R --languages=C,C++ --c++-kinds=+p --fields=+aiS --extra=+fq -f cpp.tags<CR>
set tags+=./cpp.tags,cpp.tags,

"generate local C# tags file
nnoremap <silent> <Leader># :!ctags -R --languages=C\# --fields=+aiS --extra=+fq -f cs.tags<CR>
set tags+=./cs.tags,cs.tags

"generate local Java tags file
nnoremap <silent> <Leader>J :!ctags -R --languages=Java --fields=+aiS --extra=+fq -f java.tags<CR>
set tags+=./java.tags,java.tags

"generate local Python tags file
nnoremap <silent> <Leader>P :!ctags -R --languages=Python --python-kinds=-i --fields=+aiS --extra=+fq -f py.tags<CR>
set tags+=./py.tags,py.tags

"generate local JavaScript tags file
" nnoremap <silent> <Leader>E :!ctags -R --languages=JavaScript --extra=+f --sort=yes -f js.tags<CR>
nnoremap <silent> <Leader>E :!find .
      \ -type f -name '*.js'
      \ -not -path '*/.svn/*'
      \ -not -path '*/.git/*'
      \ -not -path '*/.hg/*'
      \ -not -path '*/log/*'
      \ -not -path '*/html/*'
      \ -not -path '*/node_modules/*'
      \ -not -path '*/build/*'
      \ -exec jsctags {} -f \; \| sed '/^$/d' \| sort > js.tags<CR>
set tags+=./js.tags,js.tags

"generate local protobuf tags file
nnoremap <silent> <Leader>B :!ctags -R --languages=protobuf --extra=+fq -f protobuf.tags<CR>
set tags+=./protobuf.tags,protobuf.tags

"generate /usr/src C++ tags files
nnoremap <silent> <Leader>S :!ctags -R --languages=C,C++ --c++-kinds=+p --fields=+aiS --extra=+fq -f cpp.tags /usr/src<CR>
set tags+=./source.tags,source.tags

nnoremap <silent> <Leader>G :!find .
      \ \(
      \ -name '*.cpp' -or
      \ -name '*.cxx' -or
      \ -name '*.cc' -or
      \ -name '*.c' -or
      \ -name '*.hpp' -or
      \ -name '*.hxx' -or
      \ -name '*.hh' -or
      \ -name '*.h' -or
      \ -name '*.ipp' -or
      \ -name '*.tpp' \)
      \ -not -path '*/.svn/*'
      \ -not -path '*/.git/*'
      \ -not -path '*/.hg/*'
      \ -not -path '*/log/*'
      \ -not -path '*/html/*'
      \ -not -path '*/node_modules/*'
      \ -not -path '*/build/*' \|
      \ env GTAGSFORCECPP=1 gtags -f-
      \<CR>

"look for global tags files
if filereadable ("C:/Code/")
    set tags+="C:/Code/"
endif
if filereadable ($HOME."/Code/")
    let tags+=$HOME."/Code/"
endif

"C++ OmniCppComplete
set completeopt=menu,longest
let OmniCpp_ShowPrototypeInAbbr = 1 "show function parameters
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
imap <C-O> <C-X><C-O>

"Java eclim bindings
nnoremap <Leader>ji :JavaImport<CR>
nnoremap <Leader>jd :JavaDocSearch -x declarations<CR>
nnoremap <Leader>js :JavaSearchContext<CR>
nnoremap <Leader>ja :JavaGetSet <CR>
nnoremap <Leader>jc :JavaConstructor <CR>
nnoremap <Leader>jr :JavaRename
nnoremap <Leader>jf :%JavaFormat <CR>

"hex editing
nnoremap <Leader>h :%!xxd -g1<CR>
nnoremap <Leader>H :%!xxd -r<CR>:set bin<CR>:write<CR>:set nobin<CR>

"text editing

"list of file encodings to try
"set fileencodings=iso-2022-jp,ucs-bom,utf8,sjis,euc-jp,latin1

nnoremap <Leader>k :setlocal spell<CR>
nnoremap <Leader>K :setlocal nospell<CR>

"set ignorecase              "only for smartcase below
"set smartcase               "if no caps, case insensitive
"set autochdir               "change CWD to file in the buffer

"add dictionary to ^N completion
"set dictionary+=/usr/share/dict/words
"set complete+=k

"Perforce integration
nnoremap <Leader>a :!p4 add %<CR>
nnoremap <Leader>e :!p4 edit %<CR>

